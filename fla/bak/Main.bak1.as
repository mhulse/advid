package {		// Imports:	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Bitmap;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.system.Security;		// Caurina Tweener:	import caurina.transitions.Tweener;	import caurina.transitions.properties.FilterShortcuts;		import caurina.transitions.properties.ColorShortcuts;	FilterShortcuts.init();	ColorShortcuts.init();		// Custom classes:	import com.stheory.SimpleVideo;	import com.stheory.SimpleVideoEvent;	import me.hulse.util.FireTrace;	import me.hulse.util.Params;	import me.hulse.util.Stager;	import me.hulse.util.ClickTag;	import me.hulse.util.LockDown2;		/**	* Main	*        About: Document Class.	*/	public class Main extends Sprite {				// Meta:		private static const APP_NAME:String = 'Video Ad';		private static const APP_VERSION:String = '1.0';		private static const APP_CREATED:String = '2010/12/07';		private static const APP_MODIFIED:String = '2010/12/08';		private static const APP_AUTHOR:String = 'Micky Hulse <micky@hulse.me>';												// Override via param object:		public var stageW:int = 300;		public var stageH:int = 250;										private var _vidW:int;		private var _vidH:int;						private var _videoReady:Boolean = false;		private var _skinReady:Boolean = false;										private var _skinLoader:Loader;				private var _what:*;						// Private:		private var _ft:FireTrace;		private var _lockDown:LockDown2;		private var _stager:Stager;		private var _clickTag:ClickTag;		private var _videoMc:SimpleVideo;		// Library linkage, no physical class file exists:		private var _btnA:ButtonMc;		private var _btnB:ButtonMc;				// Private constants:		private static const ALLOWED_DOMAINS:String = 'registerguard.com, hulse.me, guardnet.com';				/**		* Main()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Main() {						_ft = new FireTrace();						_ft.log('Main() instantiated...');						// Meta:			_ft.log('Name: ' + APP_NAME + '; Version: ' + APP_VERSION + '; Created: ' +  APP_CREATED + '; Modified: ' + APP_MODIFIED + '; Author: ' + APP_AUTHOR);						/* Better way to do this? */			Security.allowDomain('*'); // '*' needed for OAS to work.						// Basic securtiy checks:			_lockDown = new LockDown2(ALLOWED_DOMAINS.split(','));			if (_lockDown.unlocked) { addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true); }					};				/**		* init()		*        About: Initializes project.		*      Returns: Nothing.		*/		private function init($e:Event):void {						// Instantiate custom classes:			_stager = new Stager(this); // Setup stage.						layout();					};				private function layout():void {						_videoMc = new SimpleVideo('video.flv', '', true);			_videoMc.videoPlayerWidth = 300;			_videoMc.x = 0;			_videoMc.y = 0;			_videoMc.setVolume(0);			_videoMc.addEventListener(SimpleVideoEvent.ON_VIDEO_READY, onReady);			_videoMc.addEventListener(SimpleVideoEvent.ON_VIDEO_STOP, onStop);						_skinLoader = new Loader;			_skinLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onSkin, false, 0, true);			_skinLoader.load(new URLRequest('skin.swf'));						// New button instance:			_btnA = new ButtonMc();			_btnA.icons_mc.gotoAndStop(2); // Playing.			_btnA.buttonMode = true;			_btnA.useHandCursor = true;			_btnA.alpha = .5;			_btnA.addEventListener(MouseEvent.MOUSE_DOWN, onControl, false, 0, true);			_btnA.addEventListener(MouseEvent.ROLL_OVER, onBtnOver, false, 0, true);			_btnA.addEventListener(MouseEvent.ROLL_OUT, onBtnOut, false, 0, true);						// New button instance:			_btnB = new ButtonMc();			_btnB.icons_mc.gotoAndStop(5); // Muted.			_btnB.buttonMode = true;			_btnB.useHandCursor = true;			_btnB.alpha = .5;			_btnB.addEventListener(MouseEvent.MOUSE_DOWN, onMute, false, 0, true);			_btnB.addEventListener(MouseEvent.ROLL_OVER, onBtnOver, false, 0, true);			_btnB.addEventListener(MouseEvent.ROLL_OUT, onBtnOut, false, 0, true);			//trace(_btnB.icons_mc.x + ', ' + _btnB.icons_mc.y);						// Position buttons on stage:			stage.addEventListener(Event.RESIZE, onResize, false, 0, true);			stage.dispatchEvent(new Event(Event.RESIZE));					};				private function buttonMcStage($pos:String, $target:MovieClip, $margin:Number = 10):void {						// Todo: make generic for use in other applications.						switch ($pos) {								case 'left':										$target.x = $margin; // Position.										break;								case 'right':										$target.x = (stage.stageWidth - $target.width) - $margin; // Position.										break;							}						// Put at bottom:			$target.y = (stage.stageHeight - $target.height) - $margin;					};				private function scaleVideo(tween:Boolean=false):void		{			trace('hello');			var sw:int = stage.stageWidth;			var sh:int = stage.stageHeight;						var videoX:int = 0;			var videoY:int = 0;								var videoWidth:int = 0;					var videoHeight:int = 0;						var Xscale:Number = sw/_vidW;			var Yscale:Number = sh/_vidH;						var scale:Number = 1;						videoWidth = sw;			videoHeight = sh;			videoX = 0;			videoY = 0;						if (sw<_vidW || sh<_vidH) {				if (Xscale<Yscale) {					scale = Xscale;				}				if (Xscale>Yscale) {					scale = Yscale;				}			}			videoWidth = _videoMc.getVideoWidth*scale;			videoHeight = _videoMc.getVideoHeight*scale;								videoX = (sw-videoWidth)/2;			videoY = (sh-videoHeight)/2;						if (_videoMc!=null) {				if (tween) {					Tweener.addTween(_videoMc,{x:videoX, y:videoY, width:videoWidth, height:videoHeight , time:0.6,transition:"easeOutExpo"});					} else {					_videoMc.x = videoX;					_videoMc.y = videoY;					_videoMc.width = videoWidth;					_videoMc.height = videoHeight;				}			}		}				private function go():void {						// Add to display list:			this.addChild(_videoMc);			this.addChild(_btnA);			this.addChild(_btnB);			this.addChild(_what);					}				private function positionSkin(type:String):void {						// center on stage.					}				//		// Handlers:		//				private function onSkin($e:Event):void {						_skinReady = true;						_what = _skinLoader.content as MovieClip;						if (_what) {								trace("movieclip");															} else {								_what = _skinLoader.content as Bitmap;								if (_what) {										trace("Bitmap");									}							}						if (_videoReady) {							trace('waited for video');								go();							}					}				private function onReady($e:SimpleVideoEvent):void {						_videoReady = true;						_vidW = _videoMc.getVideoWidth;			_vidH = _videoMc.getVideoHeight;						scaleVideo(true);						if (_skinReady) {							trace('waited for skin');								go();							}					};				private function onStop($e:SimpleVideoEvent):void {						_btnA.icons_mc.gotoAndStop(3);					};				private function onResize($e:Event):void {						scaleVideo();						positionSkin();						buttonMcStage('left', _btnA);						buttonMcStage('right', _btnB);					};				private function onMute($e:MouseEvent):void {						if ($e.currentTarget.icons_mc.currentFrame != 5) {				_videoMc.setVolume(0);				$e.currentTarget.icons_mc.gotoAndStop(5);			} else {				_videoMc.setVolume(1);				$e.currentTarget.icons_mc.gotoAndStop(4);			}					};				private function onBtnOver($e:MouseEvent):void {						// Garbage collection:			Tweener.removeTweens($e.currentTarget);						// Fadein:			Tweener.addTween($e.currentTarget, { alpha: 1, time: .3, transition: "linear" });					};				private function onBtnOut($e:MouseEvent):void {						// Garbage collection:			Tweener.removeTweens($e.currentTarget);						// Fadeout:			Tweener.addTween($e.currentTarget, { alpha: .5, time: .3, transition: "linear" });					};				private function onControl($e:MouseEvent):void {						switch ($e.currentTarget.icons_mc.currentFrame) {								case 2:					trace("a");					_videoMc.playVideo();					$e.currentTarget.icons_mc.gotoAndStop(1);					break;								case 3:					trace("b");					_videoMc.stopVideo();					_videoMc.playVideo();					$e.currentTarget.icons_mc.gotoAndStop(2);					break;								default:					trace("c");					_videoMc.pauseVideo();					$e.currentTarget.icons_mc.gotoAndStop(2);					break;							}					};			};	};