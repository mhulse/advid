package {		// Imports:	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.events.MouseEvent;	import flash.system.Security;	import flash.media.Video;	import flash.media.SoundTransform;	import flash.net.NetConnection;	import flash.net.NetStream;		// Caurina Tweener:	import caurina.transitions.Tweener;	import caurina.transitions.properties.FilterShortcuts;		import caurina.transitions.properties.ColorShortcuts;	FilterShortcuts.init();	ColorShortcuts.init();		// Custom classes:	import gs.TweenLite;	import me.hulse.util.FireTrace;	import me.hulse.util.Params;	import me.hulse.util.Stager;	import me.hulse.util.ClickTag;	import me.hulse.util.LockDown2;		/**	* Main	*        About: Document Class.	*/	public class Main extends MovieClip {				// Meta:		private static const APP_NAME:String = 'Video Ad';		private static const APP_VERSION:String = '1.0';		private static const APP_MODIFIED:String = '2010/12/07';		private static const APP_AUTHOR:String = 'Micky Hulse <micky@hulse.me>';				// Private:		private var _ft:FireTrace;		private var _lockDown:LockDown2;		private var _stager:Stager;		private var _clickTag:ClickTag;		//NetStream		public var _ns:NetStream;		public var _nc:NetConnection;		public var _video:*;		public var _st:SoundTransform;		public var _videoEnd:Boolean;		// Library linkage, no physical class file exists:		private var _btnA:ButtonMc;		private var _btnB:ButtonMc;		private var _videoMc:VideoMc;				// Private constants:		private static const ALLOWED_DOMAINS:String = 'registerguard.com, hulse.me, guardnet.com';				/**		* Main()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Main() {						_ft = new FireTrace();						_ft.log('Main() instantiated...');						// Meta:			_ft.log('Name: ' + APP_NAME + '; Version: ' + APP_VERSION + '; Modified: ' + APP_MODIFIED + '; Author: ' + APP_AUTHOR);						/* Better way to do this? */			Security.allowDomain('*'); // '*' needed for OAS to work.						// Basic securtiy checks:			_lockDown = new LockDown2(ALLOWED_DOMAINS.split(','));			if (_lockDown.unlocked) { addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true); }					};				/**		* init()		*        About: Initializes project.		*      Returns: Nothing.		*/		private function init($e:Event):void {						// Instantiate custom classes:			_stager = new Stager(this); // Setup stage.						layout();					};				private function layout():void {						_videoMc = new VideoMc();						// New button instance:			_btnA = new ButtonMc();			_btnA.buttonMode = true;			_btnA.useHandCursor = true;			_btnA.alpha = .5;			_btnA.addEventListener(MouseEvent.ROLL_OVER, onBtnOver, false, 0, true);			_btnA.addEventListener(MouseEvent.ROLL_OUT, onBtnOut, false, 0, true);						// New button instance:			_btnB = new ButtonMc();			_btnB.icons_mc.gotoAndStop(5); // Muted.			_btnB.buttonMode = true;			_btnB.useHandCursor = true;			_btnB.alpha = .5;			_btnB.addEventListener(MouseEvent.CLICK, onBtnClick, false, 0, true);			_btnB.addEventListener(MouseEvent.ROLL_OVER, onBtnOver, false, 0, true);			_btnB.addEventListener(MouseEvent.ROLL_OUT, onBtnOut, false, 0, true);			trace(_btnB.icons_mc.x + ', ' + _btnB.icons_mc.y);						// Position buttons on stage:			stage.addEventListener(Event.RESIZE, onResize, false, 0, true);			stage.dispatchEvent(new Event(Event.RESIZE));						// Add to display list:			this.addChild(_videoMc);			this.addChild(_btnA);			this.addChild(_btnB);						initVideo();					};				private function initVideo():void {						_video = new Video();			_videoMc.addChild(_video);			_nc = new NetConnection();			_nc.client = this;			_nc.connect(null);			_ns = new NetStream(_nc);			_ns.bufferTime = 3;						_st = new SoundTransform();			_st.volume = .8;            _ns.soundTransform = _st;			//playBtn.icon.gotoAndStop(1);			//centerPlay.visible = false;						loadVideo();					};				private function loadVideo() {						stage.removeEventListener(Event.ENTER_FRAME, onEnterFrames);			_videoEnd = false;			_ns.close();			_ns.addEventListener(NetStatusEvent.NET_STATUS, netStatus);			_ns.client = new Object();						_ns.client.onMetaData = function(obj:Object) {				/*				videoW = obj.width;				videoH = obj.height;				scaleVideo();				*/			};			_ns.play('video.flv');			_video.attachNetStream(_ns);			_video.smoothing = true;			//Enter Frame			stage.addEventListener(Event.ENTER_FRAME, onEnterFrames, false, 0, true);						};				private function onEnterFrames(e:Event):void {						var time = _ns.time;					};				//Net Stream Status		private function netStatus(e:NetStatusEvent):void		{			switch(e.info.code) {				case "NetStream.Play.Start":					trace("NetStream.Play.Start");					break;				case "NetStream.Buffer.Empty":					trace("NetStream.Buffer.Empty");					break;				case "NetStream.Buffer.Full":					trace("NetStream.Buffer.Full");					break;				case "NetStream.Play.Stop":					trace("NetStream.Play.Stop");					break;				case "NetStream.Play.StreamNotFound":					trace("NetStream.Play.StreamNotFound");					break;			}		}				private function buttonMcStage($pos:String, $target:MovieClip, $margin:Number = 10):void {						// Todo: make generic for use in other applications.						switch ($pos) {								case 'left':										$target.x = $margin; // Position.										break;								case 'right':										$target.x = (stage.stageWidth - $target.width) - $margin; // Position.										break;							}						// Put at bottom:			$target.y = (stage.stageHeight - $target.height) - $margin;						trace($target.y + ', ' + $target.x);					};				//		// Handlers:		//				private function onResize($e:Event):void {						buttonMcStage('left', _btnA);						buttonMcStage('right', _btnB);					};				private function onBtnClick($e:MouseEvent):void {						if ($e.currentTarget.icons_mc.currentFrame != 5) {				$e.currentTarget.icons_mc.gotoAndStop(5);			} else {				$e.currentTarget.icons_mc.gotoAndStop(4);			}					};				private function onBtnOver($e:MouseEvent):void {						// Garbage collection:			Tweener.removeTweens($e.currentTarget);						// Fadein:			Tweener.addTween($e.currentTarget, { alpha: 1, time: .3, transition: "linear" });					};				private function onBtnOut($e:MouseEvent):void {						// Garbage collection:			Tweener.removeTweens($e.currentTarget);						// Fadeout:			Tweener.addTween($e.currentTarget, { alpha: .5, time: .3, transition: "linear" });					};			};	};