package {		// Imports:	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.system.Security;		import com.greensock.events.LoaderEvent;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.VideoLoader;	//import com.greensock.loading.SWFLoader;	import com.greensock.TweenLite;	import com.greensock.easing.Elastic;	import com.greensock.easing.Linear;		// Custom classes:	import me.hulse.util.FireTrace;	import me.hulse.util.Stager;	import me.hulse.util.LockDown2;	import me.hulse.util.ClickTag;	import me.hulse.util.Params;		/**	* Main	*        About: Document Class.	*/	public class Main extends Sprite {				// Meta:		private static const APP_NAME:String = 'Video Ad';		private static const APP_VERSION:String = '1.0';		private static const APP_CREATED:String = '2010/12/07';		private static const APP_MODIFIED:String = '2010/12/10';		private static const APP_AUTHOR:String = 'Micky Hulse <micky@hulse.me>';				// Private constants:		private static const ALLOWED_DOMAINS:String = 'registerguard.com, hulse.me, guardnet.com';				// Flashvars:		private var _params_video:String;				// Private:		private var _video:VideoLoader;		private var _videoContainer:Sprite;		private var _controlContainer:Sprite;		//private var _swf:SWFLoader;		//private var _swfContainer:Sprite;		private var _queue:LoaderMax;		private var _ft:FireTrace;		private var _lockDown:LockDown2;		private var _stager:Stager;		private var _clickTag:ClickTag;				// Library linkage, no physical class file exists:		private var _btnA:ButtonMc;		private var _btnB:ButtonMc;		private var _ldr:LoaderMc;				/**		* Main()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Main() {						trace('Main()');						_ft = new FireTrace();						_ft.log('Main() instantiated...');						// Meta:			_ft.log('Name: ' + APP_NAME + '; Version: ' + APP_VERSION + '; Created: ' +  APP_CREATED + '; Modified: ' + APP_MODIFIED + '; Author: ' + APP_AUTHOR);						/* Better way to do this? */			Security.allowDomain('*'); // '*' needed for OAS to work.						// Basic securtiy checks:			_lockDown = new LockDown2(ALLOWED_DOMAINS.split(','));			if (_lockDown.unlocked) { addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true); }					};				/**		* init()		*        About: Initializes project.		*      Returns: Nothing.		*/		private function init($e:Event):void {						trace('init()');						// GC:			removeEventListener(Event.ADDED_TO_STAGE, init);						// Setup stage:			_stager = new Stager(this);						// Clicktag:			_clickTag = new ClickTag(this);						// Get embed parameters/flashvars:			getParams();						layout();					};				private function getParams():void {						trace('getParams()');						// Instantiate params class:			var p:Params = new Params(this);			 			 // Get params:			_params_video = p.getParam('video', 'video.flv'); // Path to video file to load. Default is "video.flv".			// Add more nere.					};				private function layout():void {						trace('layout()');						// Loading movieclip:			_ldr = new LoaderMc();			center(_ldr);			this.addChild(_ldr);						// Video:			_videoContainer = this.addChild(new Sprite()) as Sprite;			_video = new VideoLoader(_params_video, { name: 'video', container: _videoContainer, alpha: 0, autoPlay: true, width: stage.stageWidth, height: stage.stageHeight, scaleMode: 'proportionalInside', volume: 0, bgColor: 0x000000, onInit: onMetaData, onComplete: onVideoLoaded });			_video.addEventListener(VideoLoader.VIDEO_COMPLETE, onVideoComplete, false, 0, true);			// Clicktag action:			_videoContainer.addEventListener(MouseEvent.MOUSE_UP, onClick, false, 0, true); // http://www.kirupa.com/forum/showthread.php?t=260312			_videoContainer.buttonMode = true;			_videoContainer.useHandCursor = true;						// For the next version, load a "skin":			//_swfContainer = this.addChild(new Sprite()) as Sprite;			//_swf = new SWFLoader('skin.swf', { name: 'swf', estimatedBytes: 3000, container: this, x: 0, autoPlay: false }) 						// LoaderMax queue:			_queue = new LoaderMax({ name: 'mainQueue', onProgress: progressHandler, onComplete: completeHandler, onError: errorHandler });			_queue.append(_video);			//_queue.append(_swf);			_queue.load();						// Controls:			_controlContainer = this.addChild(new Sprite()) as Sprite;						// New button instance:			_btnA = new ButtonMc();			_btnA.icons_mc.gotoAndStop(2); // Playing.			_btnA.buttonMode = true;			_btnA.useHandCursor = true;			_btnA.alpha = 0;			_btnA.addEventListener(MouseEvent.MOUSE_DOWN, onControl, false, 0, true);			_btnA.addEventListener(MouseEvent.ROLL_OVER, onBtnOver, false, 0, true);			_btnA.addEventListener(MouseEvent.ROLL_OUT, onBtnOut, false, 0, true);			// Position:			_btnA.y = (stage.stageHeight - _btnA.height) - 10;			_btnA.x = -(_btnA.width); // Off-stage.			_controlContainer.addChild(_btnA);						// New button instance:			_btnB = new ButtonMc();			_btnB.icons_mc.gotoAndStop(5); // Muted.			_btnB.buttonMode = true;			_btnB.useHandCursor = true;			_btnB.alpha = 0;			_btnB.addEventListener(MouseEvent.MOUSE_DOWN, onMute, false, 0, true);			_btnB.addEventListener(MouseEvent.ROLL_OVER, onBtnOver, false, 0, true);			_btnB.addEventListener(MouseEvent.ROLL_OUT, onBtnOut, false, 0, true);			// Position:			_btnB.y = (stage.stageHeight - _btnB.height) - 10;			_btnB.x = (stage.stageWidth + _btnB.width) ; // Off-stage.			_controlContainer.addChild(_btnB);						// Initial stage resize:			stage.addEventListener(Event.RESIZE, onResizeInit, false, 0, true);			//dispatchEvent(new Event(Event.RESIZE));					};						function progressHandler(event:LoaderEvent):void {						trace('progressHandler()');						trace('Progress: ' + event.target.progress);					};				function completeHandler($e:LoaderEvent):void {						trace('completeHandler()');						trace($e.target + " is complete!");					};		 		function errorHandler($e:LoaderEvent):void {						trace('errorHandler()');						trace("Error occured with " + $e.target + ": " + $e.text);					};				private function buttonMcStage($pos:String, $target:MovieClip, $margin:Number = 10):void {						trace('buttonMcStage()');						// Todo: make generic for use in other applications.						switch ($pos) {								case 'left':										$target.x = $margin; // Position.										break;								case 'right':										$target.x = (stage.stageWidth - $target.width) - $margin; // Position.										break;							}						// Put at bottom:			$target.y = (stage.stageHeight - $target.height) - $margin;					};				private function center($obj:*):void {						$obj.x = stage.stageWidth * .5 - $obj.width * .5;			$obj.y = stage.stageHeight * .5 - $obj.height * .5;					};				private function showVideo():void {						trace('showVideo()');						TweenLite.to(_video.content, .5, { alpha: 1, ease: Linear.easeNone, onComplete: removeThis, onCompleteParams: [ _ldr ] });					};				private function showButtons():void {						trace('showButtons()');						TweenLite.to(_btnA, 2, { delay: .75, x: 10, alpha: .5, ease: Elastic.easeOut, easeParams: [.25, .9] });			TweenLite.to(_btnB, 2, { delay: .75, x: (stage.stageWidth - _btnB.width - 10), alpha: .5, ease: Elastic.easeOut, easeParams: [.25, .9] });					};				private function removeThis($obj:*):void {						trace('removeThis()');						try {								// No sense in having this animating while it is covered by video:				this.removeChild($obj);							} catch (err:Error) {								trace(err);							}								};				private function onMetaData($e:Event):void {						trace('onMetaData()');					};				/**		* onClick()		*        About: Click listener method.		*               clickTAG initialized here.		*       @param: MouseEvent.		*      Returns: Nothing.		*/		private function onClick(e:MouseEvent):void {						trace('onClick()');						// Setup clickTAG:			_clickTag.getURL();					};				private function onVideoLoaded($e:LoaderEvent):void {						trace('onReady()');						showButtons();			showVideo();					};				private function onVideoComplete($e:LoaderEvent):void {						trace('onStop()');						_btnA.icons_mc.gotoAndStop(3);					};				private function onMute($e:MouseEvent):void {						trace('onMute()');						if (_video.volume > 0) {								_btnB.icons_mc.gotoAndStop(5);								TweenLite.to(_video, 1, { volume: 0, ease: Linear.easeNone });							} else {								_btnB.icons_mc.gotoAndStop(4);								TweenLite.to(_video, 3, { volume: 1, ease: Linear.easeNone });							}					};				private function onBtnOver($e:MouseEvent):void {						trace('onBtnOver()');						TweenLite.to($e.currentTarget, .3, { alpha: 1, ease: Linear.easeNone });					};				private function onBtnOut($e:MouseEvent):void {						trace('onBtnOut()');						TweenLite.to($e.currentTarget, .3, { alpha: .5, ease: Linear.easeNone });					};				private function onControl($e:MouseEvent):void {						trace('onControl()');						if (_video.playProgress == 1) {								_btnA.icons_mc.gotoAndStop(2);				_video.gotoVideoTime(0)				_video.playVideo();							} else if (_video.videoPaused) {								_btnA.icons_mc.gotoAndStop(2);				_video.playVideo();							} else {								_btnA.icons_mc.gotoAndStop(1);				_video.pauseVideo();							}					};				private function onResizeInit($e:Event):void {						trace('onResizeInit()');						// Kill the initial resize event listener:			stage.removeEventListener(Event.RESIZE, onResizeInit);						// Remove tweens:			TweenLite.killTweensOf(_btnB);			TweenLite.killTweensOf(_btnA);						// Setup a new resize listener:			stage.addEventListener(Event.RESIZE, onResize, false, 0, true);					};				private function onResize($e:Event):void {						trace('onResize()');						center(_ldr);						buttonMcStage('left', _btnA);						buttonMcStage('right', _btnB);						// Resize video:			_video.content.fitWidth = stage.stageWidth;			_video.content.fitHeight = stage.stageHeight;					};			};	};